# File for analyzing code

from TestFile import TEST

# Example Use of TEST
# Test represents the sort of code generated by GPT
# TEST("{{()}}") -> Return True

# Halstead Calculations
#
# n1 = the number of distinct operators
# n2 = the number of distinct operands
# N1 = the total number of operators
# N2 = the total number of operands
#
# Program vocabulary: n = n1 + n2
# Program length: N = N1 + N2
# Calculated program length: N'=n1log2(n1)+n2log2(n2)
# Volume: V= Nlog2(n)
# Difficulty: D= (n1/2) * (N2/n2)
# Effort: E= DV

# Hash Map of all operator Tokens in Python, 27 long
OP_TABLE = {
    # Assingment
    "+=" : "op",
    "*=" : "op",
    "/=" : "op",
    "%=" : "op",
    "**=" : "op",
    "//=" : "op",
    # Arithmetric
    "+" : "op",
    "-" : "op",
    "*" : "op",
    "/" : "op",
    "%" : "op",
    "**" : "op",
    # Comparison
    "==" : "op",
    "!=" : "op",
    ">" : "op",
    "<" : "op",
    ">=" : "op",
    "<=" : "op",
    # Bitwise
    "&" : "op",
    "|" : "op",
    "^" : "op",
    "~" : "op",
    "<<" : "op",
    ">>" : "op",
    # Logical
    "and" : "op",
    "or" : "op",
    "not" : "op",
}

def TokeniseCode():
    operatorCount = 0;
    operandCount = 0;

    distinctOperators = {}
    distinctOperands = {}
    nullTolkens = [' ', '\n','(',')','[',']','{','}']
    with open("TestFile.py", "r") as file:
        for line in file:
            # Set up token search
            current = 0
            while current < len(line):
                token = line[current]
                if token in nullTolkens:
                    current+=1
                    continue
                if token.isdigit():
                    number = ""
                    while token.isdigit():
                        number += token
                        current+=1
                        token = line[current]
                    # Handle Token

    return [operatorCount, distinctOperators]

opC,dOp = TokeniseCode()
print(opC)
print(dOp)
# Halstead Metrics

#def ProgramVolume()

