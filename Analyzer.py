# File for analyzing code

# Example Use of TEST
# Test represents the sort of code generated by GPT
# TEST("{{()}}") -> Return True

# Halstead Calculations
#
# n1 = the number of distinct operators
# n2 = the number of distinct operands
# N1 = the total number of operators
# N2 = the total number of operands
#
# Program vocabulary: n = n1 + n2
# Program length: N = N1 + N2
# Calculated program length: N'=n1log2(n1)+n2log2(n2)
# Volume: V= Nlog2(n)
# Difficulty: D= (n1/2) * (N2/n2)
# Effort: E= DV

# Operators are all normal operators, keywords and brackets of all kinds ( (), [], {} )
# Operands are variables, methods, constants (False, True)


# Hash Map of all operator Tokens in Python
OP_TABLE = {
    # Assingment
    "+=" : "op",
    "*=" : "op",
    "/=" : "op",
    "%=" : "op",
    "**=" : "op",
    "//=" : "op",
    "=" : "op",
    "." : "op",
    # Arithmetric
    "+" : "op",
    "-" : "op",
    "*" : "op",
    "/" : "op",
    "%" : "op",
    "**" : "op",
    # Comparison
    "==" : "op",
    "!=" : "op",
    ">" : "op",
    "<" : "op",
    ">=" : "op",
    "<=" : "op",
    # Bitwise
    "&" : "op",
    "|" : "op",
    "^" : "op",
    "~" : "op",
    "<<" : "op",
    ">>" : "op",
    # Brackets and New Path
    "(" : "op",
    ")" : "op",
    "{" : "op",
    "}" : "op",
    "[" : "op",
    "]" : "op",
    ":" : "op",
    # Keyword
    "and" : "op",
    "or" : "op",
    "not" : "op",
    "None" : "op",
    "as" : "op",
    "assert" : "op",
    "async" : "op",
    "await" : "op",
    "break" : "op",
    "class" : "op",
    "continue" : "op",
    "def" : "op",
    "del" : "op",
    "elif" : "op",
    "else" : "op",
    "except" : "op",
    "finally" : "op",
    "for" : "op",
    "from" : "op",
    "global" : "op",
    "if" : "op",
    "import" : "op",
    "in" : "op",
    "is" : "op",
    "lambda" : "op",
    "nonlocal" : "op",
    "pass" : "op",
    "raise" : "op",
    "return" : "op",
    "try" : "op",
    "while" : "op",
    "with" : "op",
    "yield" : "op",
}

def TokeniseCode():
    operatorCount = 0;
    operandCount = 0;

    distinctOperators = {}
    distinctOperands = {}

    nullTolkens = [' ', '\n',',']

    with open("TestFile.py", "r") as file:
        for line in file:
            line += "\n"
            # Set up token search
            current = 0
            while current < len(line):
                token = line[current]
                if token in nullTolkens:
                    current += 1
                    continue

                # Skip Comments
                if token == "#":
                    current = len(line)
                    continue
                if token == "'":
                    if line[current+2] == "'":
                        current += 3
                        continue

                # Letter
                if token.isalpha():
                    word = ""
                    while line[current].isalpha():
                        word += line[current]
                        current += 1
                    if word in OP_TABLE:
                        if word not in distinctOperators:
                            distinctOperators[word] = OP_TABLE[word]
                        operatorCount += 1
                        current += 1
                    else:
                        operandCount += 1
                        if word not in distinctOperands:
                            distinctOperands[word] = word
                    continue

                # Number
                if token.isdigit():
                    number = ""
                    while line[current].isdigit():
                        number += line[current]
                        current += 1
                    if number not in distinctOperands:
                        distinctOperands[number] = number
                    operandCount += 1
                    continue

                # String
                if token == '"' or token == "'" or token == "_":
                    current += 1
                    stringValue = ""
                    while line[current] != '"' and line[current] != "'":
                        lineCurrent = line[current]
                        stringValue += line[current]
                        current += 1
                    if stringValue not in distinctOperands:
                        distinctOperands[stringValue] = stringValue
                    operandCount += 1
                    current += 1
                    continue

                # Single Ops
                if token in OP_TABLE:
                    if token not in distinctOperators:
                        distinctOperators[token] = OP_TABLE[token]
                    operatorCount += 1
                    current += 1
                    continue
                else:
                    value = ""
                    while value not in OP_TABLE:
                        value += line[current]
                        current += 1
                    if value not in distinctOperators:
                        distinctOperators[value] = value
                    operatorCount += 1
                    continue



    return [(operatorCount,distinctOperators), (operandCount, distinctOperands)]

opC,opR = TokeniseCode()
print("Number Of operators: " + str(opC[0]))
for i in opC[1]:
    print(i)
print("Number Of Operands: " + str(opR[0]))
for i in opR[1]:
    print(i)
# Halstead Metrics

#def ProgramVolume()

