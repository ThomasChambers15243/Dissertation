for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp]
gen <- samples$genResults[samples$imp == curImp]
# Perform Test
results = wilcox.test(hum, gen,
alternative = "greater", paired = TRUE, exact = FALSE)
# Append lists
zValueResults <- insert_sorted_value(results$statistic, zValueResults)
pValueResults <- insert_sorted_value(results$p.value, pValueResults)
}
## STAGE 3 - Collect Data ##
#print(mean(zValueResults))
#print(mean(pValueResults))
zValues <- append(mean(zValueResults), zValues)
pValues <- append(mean(pValueResults), pValues)
problemResults <- list(problemNum = problem,
pValue = mean(pValueResults),
zValue = mean(zValueResults))
allResults <- append(allResults, problemResults)
}
def = data.frame(zValues)
pool(def)
pool(samples)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
final_results <- data.frame()
def = data.frame(zValues,pValues)
print(def)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
print(final_results)
final_results <- data.frame(c("Problem", "zValue", "pValues"))
print(final_results)
final_results <- data.frame(c("ProblemNum", "z-Value", "p-Values"))
print(final_results)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
View(final_results)
# Create an empty data frame with 0 rows and 3 columns
final_results <- data.frame(matrix(ncol = 3, nrow = 0))
# Provide column names
colnames(df) <- c("ProblemNum", "z-Value", "p-Values")
print(final_results)
# Create an empty data frame with 0 rows and 3 columns
final_results <- data.frame(matrix(ncol = 3, nrow = 0))
# Provide column names
colnames(final_results) <- c("ProblemNum", "z-Value", "p-Values")
print(final_results)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
pool(samples)
print(final_results)
print(final_results)
#print(mean(zValueResults))
#print(mean(pValueResults))
zValues <- append(mean(zValueResults), zValues)
pValues <- append(mean(pValueResults), pValues)
problemResults <- list(problemNum = problem,
pValue = mean(pValueResults),
zValue = mean(zValueResults))
allResults <- append(allResults, problemResults)
print(final_results)
final_results[nrow(final_results) + 1, ] <- c(problem, zValues, pValues)
for (problem in 0:number_of_problems) {
genSampleResults_P <- read.csv(gsub(" ", "", paste(genDataDir,'P',problem,".csv")))
humanSampleResults_P <- read.csv(gsub(" ", "", paste(humanDataDir,'p',problem,".csv")))
## STAGE 1 - Create Imputation ##
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
# Examine Data
#print(complete(humanSampleResults_P.imp, 1))
#print(complete(genSampleResults_P.imp, 1))
#Plots Graph of Imputated Values
# Visualize Shit
# Extract the "tall" matrix which stacks the imputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = TRUE)
# cci` returns logical whether its input is complete at each observation.
humanSampleResults_P.comp$Score.NA <- cci(humanSampleResults_P$Score)
head(humanSampleResults_P.comp[, c("Score", "Score.NA")])
# Plot
ggplot(humanSampleResults_P.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
# Gets complete set of all imuputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = FALSE)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = FALSE)
# Creates data frame with both groups scores
imp = humanSampleResults_P.comp$.imp
humResults = humanSampleResults_P.comp$Score
genResults = genSampleResults_P.comp$Score
# DataGrame
samples <- data.frame(imp, humResults, genResults)
#print(samples)
## STAGE 2 - Analysis of Data ##
pValueResults <- numeric(0)
zValueResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp]
gen <- samples$genResults[samples$imp == curImp]
# Perform Test
results = wilcox.test(hum, gen,
alternative = "greater", paired = TRUE, exact = FALSE)
# Append lists
zValueResults <- insert_sorted_value(results$statistic, zValueResults)
pValueResults <- insert_sorted_value(results$p.value, pValueResults)
}
## STAGE 3 - Collect Data ##
#print(mean(zValueResults))
#print(mean(pValueResults))
zValues <- append(mean(zValueResults), zValues)
pValues <- append(mean(pValueResults), pValues)
problemResults <- list(problemNum = problem,
pValue = mean(pValueResults),
zValue = mean(zValueResults))
allResults <- append(allResults, problemResults)
print(final_results)
final_results[nrow(final_results) + 1, ] <- c(problem, zValues, pValues)
}
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
print(final_results)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp]
gen <- samples$genResults[samples$imp == curImp]
# Perform Test
results = wilcox.test(hum, gen,
alternative = "greater", paired = TRUE, exact = FALSE)
# Append lists
zValueResults <- append(results$statistic, zValueResults)
pValueResults <- append(results$p.value, pValueResults)
}
#print(mean(zValueResults))
#print(mean(pValueResults))
zValues <- append(mean(zValueResults), zValues)
library(mice)
library(magrittr)
library(ggplot2)
# Paths to data Set
humanDataDir <- "HumanResults/"
genDataDir <- "SampleResults/"
# Number of Imputations
imputations <- 5
number_of_problems <- 4
# Opens CSV's
problem = 0
insert_sorted_value <- function(value, existing_list) {
# Insert the value into the list while maintaining sorted order
existing_list <- c(existing_list, value)
existing_list <- sort(existing_list, decreasing = TRUE)
return(existing_list)
}
pValues <- numeric(0)
zValues <- numeric(0)
allResults <- numeric(0)
final_results = data.frame(matrix(
vector(), 0, 3, dimnames=list(c(), c("ProblemNum", "z-Value", "p-Values"))),
stringsAsFactors=F)
for (problem in 0:number_of_problems) {
genSampleResults_P <- read.csv(gsub(" ", "", paste(genDataDir,'P',problem,".csv")))
humanSampleResults_P <- read.csv(gsub(" ", "", paste(humanDataDir,'p',problem,".csv")))
## STAGE 1 - Create Imputation ##
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
# Examine Data
#print(complete(humanSampleResults_P.imp, 1))
#print(complete(genSampleResults_P.imp, 1))
#Plots Graph of Imputated Values
# Visualize Shit
# Extract the "tall" matrix which stacks the imputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = TRUE)
# cci` returns logical whether its input is complete at each observation.
humanSampleResults_P.comp$Score.NA <- cci(humanSampleResults_P$Score)
head(humanSampleResults_P.comp[, c("Score", "Score.NA")])
# Plot
ggplot(humanSampleResults_P.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
# Gets complete set of all imuputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = FALSE)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = FALSE)
# Creates data frame with both groups scores
imp = humanSampleResults_P.comp$.imp
humResults = humanSampleResults_P.comp$Score
genResults = genSampleResults_P.comp$Score
# DataGrame
samples <- data.frame(imp, humResults, genResults)
#print(samples)
## STAGE 2 - Analysis of Data ##
pValueResults <- numeric(0)
zValueResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp]
gen <- samples$genResults[samples$imp == curImp]
# Perform Test
results = wilcox.test(hum, gen,
alternative = "greater", paired = TRUE, exact = FALSE)
# Append lists
zValueResults <- append(results$statistic, zValueResults)
pValueResults <- append(results$p.value, pValueResults)
}
## STAGE 3 - Collect Data ##
#print(mean(zValueResults))
#print(mean(pValueResults))
zValues <- append(mean(zValueResults), zValues)
pValues <- append(mean(pValueResults), pValues)
# problemResults <- list(problemNum = problem,
#                    pValue = mean(pValueResults),
#                    zValue = mean(zValueResults))
# allResults <- append(allResults, problemResults)
final_results[nrow(final_results) + 1, ] <- c(problem, zValues, pValues)
}
print(final_results)
# problemResults <- list(problemNum = problem,
#                    pValue = mean(pValueResults),
#                    zValue = mean(zValueResults))
# allResults <- append(allResults, problemResults)
print(zValues)
print(pValues)
final_results[nrow(final_results) + 1, ] <- c(problem, zValues, pValues)
for (problem in 0:number_of_problems) {
genSampleResults_P <- read.csv(gsub(" ", "", paste(genDataDir,'P',problem,".csv")))
humanSampleResults_P <- read.csv(gsub(" ", "", paste(humanDataDir,'p',problem,".csv")))
## STAGE 1 - Create Imputation ##
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
# Examine Data
#print(complete(humanSampleResults_P.imp, 1))
#print(complete(genSampleResults_P.imp, 1))
#Plots Graph of Imputated Values
# Visualize Shit
# Extract the "tall" matrix which stacks the imputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = TRUE)
# cci` returns logical whether its input is complete at each observation.
humanSampleResults_P.comp$Score.NA <- cci(humanSampleResults_P$Score)
head(humanSampleResults_P.comp[, c("Score", "Score.NA")])
# Plot
ggplot(humanSampleResults_P.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
# Gets complete set of all imuputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = FALSE)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = FALSE)
# Creates data frame with both groups scores
imp = humanSampleResults_P.comp$.imp
humResults = humanSampleResults_P.comp$Score
genResults = genSampleResults_P.comp$Score
# DataGrame
samples <- data.frame(imp, humResults, genResults)
#print(samples)
## STAGE 2 - Analysis of Data ##
pValueResults <- numeric(0)
zValueResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp]
gen <- samples$genResults[samples$imp == curImp]
# Perform Test
results = wilcox.test(hum, gen,
alternative = "greater", paired = TRUE, exact = FALSE)
# Append lists
zValueResults <- append(results$statistic, zValueResults)
pValueResults <- append(results$p.value, pValueResults)
}
## STAGE 3 - Collect Data ##
#print(mean(zValueResults))
#print(mean(pValueResults))
zValues <- append(mean(zValueResults), zValues)
pValues <- append(mean(pValueResults), pValues)
# problemResults <- list(problemNum = problem,
#                    pValue = mean(pValueResults),
#                    zValue = mean(zValueResults))
# allResults <- append(allResults, problemResults)
print(zValues)
print(pValues)
final_results[nrow(final_results) + 1, ] <- c(problem, zValues, pValues)
}
print(final_results)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
## Type 1 Error Correction: Benjamini-Hochberg Procedure ##
print(final_results)
unordered_pValues <- final_results$p.Values
ordered_pValues <- numeric(0)
for (i in unordered_pValues) {
ordered_pValues <- insert_sorted_value(i, ordered_pValues)
}
print(ordered_pValues)
significance = 0.05
for (index in 1:ordered_pValues) {
print(index)
}
significance = 0.05
for (index in 1:ordered_pValues) {
print(index)
}
significance = 0.05
for (index in 1:ordered_pValues) {
print(index)
print("NEXT")
}
significance = 0.05
for (index in 1:ordered_pValues) {
print(paste("Index is:",index))
hoch = ordered_pValues[index] / (significance/index)
print(paste("Hoch is:", hoch))
}
significance = 0.05
for (index in 1:ordered_pValues) {
print(paste("Index is:",index))
hochSig = (significance/index)
print(paste("Hoch is:", hochSig))
}
significance = 0.05
length = 1:ordered_pValues
for (index in 1:length) {
print(paste("Index is:",index))
hochSig = (significance/index)
print(paste("Hoch is:", hochSig))
}
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
significance = 0.05
remaining_Values = numeric(0)
for (index in 1:length(ordered_pValues)) {
hochSig = (significance/index)
print(paste("Index is:",index))
print(paste("Hoch is:", hochSig))
if (ordered_pValues[index] > hochSig) {
remaining_Values <- ordered_pValues[[3:length(ordered_pValues)]]
break
}
}
significance = 0.05
remaining_Values = numeric(0)
for (index in 1:length(ordered_pValues)) {
hochSig = (significance/index)
print(paste("Index is:",index))
print(paste("Hoch is:", hochSig))
print(paste("pValue is:", ordered_pValues[index]))
if (ordered_pValues[index] > hochSig) {
remaining_Values <- ordered_pValues[[3:length(ordered_pValues)]]
break
}
}
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
significance = 0.05
remaining_Values = numeric(0)
for (index in 1:length(ordered_pValues)) {
hochSig = (significance/index)
print(paste("Index is:",index))
print(paste("Hoch is:", hochSig))
print(paste("pValue is:", ordered_pValues[index]))
if (ordered_pValues[index] > hochSig) {
print(ordered_pValues[[3:length(ordered_pValues)]] )
break
}
}
significance = 0.05
remaining_Values = numeric(0)
for (index in 1:length(ordered_pValues)) {
hochSig = (significance/index)
print(paste("Index is:",index))
print(paste("Hoch is:", hochSig))
print(paste("pValue is:", ordered_pValues[index]))
if (ordered_pValues[index] > hochSig) {
remaining_Values <- ordered_pValues[(index + 1):length(ordered_pValues)]
print("Remaining p-values:")
print(remaining_Values)
break
}
}
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
# Filter the data frame
significantResults <- final_results %>%
filter(p.Values %in% remaining_values)#samples$humResults[samples$imp == curImp]
# Filter the data frame
significantResults <- final_results[final_results$p.Values %in% remaining_values, ]#samples$humResults[samples$imp == curImp]
# Filter the data frame
significantResults <- final_results[final_results$p.Values %in% remaining_Values, ]#samples$humResults[samples$imp == curImp]
print(significantResults)
# Filter the data frame
significantResults <- final_results[final_results$p.Values %in% remaining_Values, ]
indicative_results <- final_results[!final_results$p.Values %in% remaining_values, ]
print(significant_results)
print(indicative_results)
# Filter the data frame
significant_results <- final_results[final_results$p.Values %in% remaining_Values, ]
indicative_results <- final_results[!final_results$p.Values %in% remaining_Values, ]
print(significant_results)
print(indicative_results)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
# Filter the data frame
significant_results <- final_results[final_results$p.Values %in% remaining_Values, ]
indicative_results <- final_results[!final_results$p.Values %in% remaining_Values, ]
# Print Final Results
print(significant_results)
print(indicative_results)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
# Number of Rows
sampleSize <- nrow(genSampleResults_P)
print(sampleSize)
# Normality Test
print(shapiro.test(genSampleResults_P$Score))
print(shapiro.test(humanSampleResults_P$Score))
# Normality Test
print(shapiro.test(genSampleResults_P$Score)$p-value)
print(shapiro.test(humanSampleResults_P$Score))
# Normality Test
print(shapiro.test(genSampleResults_P$Score))
print(shapiro.test(genSampleResults_P$Score)$p-value)
# Normality Test
print(shapiro.test(genSampleResults_P$Score))
print(shapiro.test(genSampleResults_P$Score)$p-value)
source("~/Games AC/CompSci Year 3/Dissertation/data/main.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
sampleSize = nrow(genSampleResults_P)
print(sampleSize)
print(sampleSize * 2)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
# Effect Sizes
sd(hum$score)
# Effect Sizes
sd(hum$.core)
# Effect Sizes
sd(hum.Score)
# Effect Sizes
sd(hum$Score)
# Effect Sizes
sd(hum)
# Effect Sizes
print(sd(hum))
# Effect Sizes
print(hum)
# Effect Sizes
effectR <- (mean(hum) - mean(gen)) / sd(hum)
# Effect Sizes
effectR <- (mean(hum) - mean(gen)) / sd(hum)
print(effectR)
# Effect Sizes
effectR_hum <- (mean(hum) - mean(gen)) / sd(hum)
effectR_gen <- (mean(hum) - mean(gen)) / sd(gen)
print(effectR_hum)
print(effectR_gen)
# Effect Sizes
effectR_hum <- (mean(hum) - mean(gen)) / sd(hum)
effectR_gen <- (mean(gen) - mean(hum)) / sd(gen)
print(effectR_hum)
effectR_gen <- (mean(gen) - mean(hum)) / sd(gen)
print(effectR_hum)
print(effectR_gen)
calc_effect_size <- function(list1, list2) {
effectR <- (mean(list1) - mean(list2)) / sd(list1)
return (effectR)
}
# Effect Sizes
print(calc_effect_size(hum, gen, hum))
print(calc_effect_size(hum, gen, gen))
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
# Effect Sizes
print(calc_effect_size(hum, gen, hum))
print(calc_effect_size(hum, gen, gen))
# Effect Sizes
humEffectSize <- calc_effect_size(hum, gen, hum)
# Effect Sizes
humEffectSize <- calc_effect_size(hum, gen, hum)
genEffectSize <- calc_effect_size(hum, gen, gen)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
# Effect Sizes
humEffectSize <- calc_effect_size(hum, gen)
genEffectSize <- calc_effect_size(hum, gen)
# Effect Sizes
EffectSize <- calc_effect_size(hum, gen)
print(EffectSize)
# Effect Sizes
CohendEffectSize <- calc_effect_size(hum, gen)
print(CohendEffectSize)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/Main.R", echo=TRUE)
