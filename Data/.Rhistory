source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
library(mice)
library(ggplot2)
# Paths to data Set
humanDataDir <- "HumanResults/"
genDataDir <- "SampleResults/"
imputations <- 5
# Opens CSVs
problem = 0
genSampleResults_P <- read.csv(gsub(" ", "", paste(genDataDir,'P',problem,".csv")))
humanSampleResults_P <- read.csv(gsub(" ", "", paste(humanDataDir,'p',problem,".csv")))
genResults = genSampleResults_P$Score
humResults = humanSampleResults_P$Score
samples <- data.frame(genSampleResults_P$Attempt, humResults, genResults)
print(samples)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
genResults = genSampleResults_P$Score
humResults = humanSampleResults_P$Score
attemps = humanSampleResults_P$Attempt
samples <- data.frame(attemps, humResults, genResults)
print(samples)
samples <- data.frame(humResults, genResults)
samples <- data.frame(humResults, genResults)
print(samples)
imp <- mice(samples, m = imputations, method = "pmm")
fit <- with(imp, mean(imp$data$Score))
samples.imp <- mice(samples, m = imputations, method = "pmm")
fit = with(samples.imp, wilcox.test(genResults ~ humResults))
samples.imp <- mice(samples, m = imputations, method = "pmm")
print(samples)
samples.imp <- mice(samples, m = imputations, method = "pmm")
print(samples.imp)
samples.imp <- mice(samples, m = imputations, method = "pmm")
print(complete(samples.imp)
samples.imp <- mice(samples, m = imputations, method = "pmm")
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
imp <- mice(samples, m = imputations, method = "pmm")
print(complete(imp, action='long', include=FALSE))
print(complete(samples.imp, action='long', include=FALSE))
samples.imp <- mice(samples, m = imputations, method = "pmm")
print(complete(samples.imp, action='long', include=FALSE))
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(genResults ~ humResults))
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(genResults, humResults))
samples.imp <- mice(samples, m = imputations, method = "pmm")
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(genResults, humResults,
alternative = "greater", paired = TRUE, exact = FALSE))
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(genResults, humResults,
alternative = "greater", paired = TRUE, exact = FALSE))
summary(pool(fit))
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(genResults, humResults,
alternative = "greater", paired = TRUE, exact = FALSE))
pool(fit)
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(genResults, humResults,
alternative = "greater", paired = TRUE, exact = FALSE))
pool(fit)
print(pool)
pool(fit)
print(pool())
#pool(fit)
print(pool(fit))
#pool(fit)
print(pool(fit))
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
print(fit)
print(fit)
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(humResults, genResults,
alternative = "greater", paired = TRUE, exact = FALSE))
print(fit)
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(humResults, genResults,
alternative = "greater", paired = TRUE, exact = FALSE))
print(fit[0])
print(fit.fit)
print(fit)
print(fit[1])
print(fit[1])
## NEW ABOVE
#md.pattern(humanSampleResults_P)
print(complete(humanSampleResults_P.imp, 1))
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(humResults, genResults,
alternative = "greater", paired = TRUE, exact = FALSE))
print(fit[1])
print(fit[2])
print(fit[3])
print(fit[4])
print(fit[4][1])
print("HERE")
#print(complete(samples.imp, action='long', include=FALSE))
fit = with(samples.imp, wilcox.test(humResults, genResults,
alternative = "greater", paired = TRUE, exact = FALSE))
pool(fit)
print(fit[4][1])
print(fit$analyses)#[4][1])
print("HERE")
print(fit$analyses)#[4][1])
print(fit$analyses[1])#[4][1])
print(fit$analyses[1].statistic)#[4][1])
print(fit$analyses[1]$statistic)#[4][1])
print("HERE")
print(fit$analyses[1]$statistic)#[4][1])
print(fit$analyses[1])#[4][1])
print(fit$analyses[1]$statistic)
print(fit$analyses[1].statistic)#[4][1])
print(fit$analyses[1]pvalue)#[4][1])
print(fit$analyses[1]$pvalue)#[4][1])
print(fit$analyses[1])#[4][1])
print(fit$analyses[1][0])
print(fit$analyses[1])#[4][1])
print(fit$analyses[1][1])
print(fit$analyses[1])#[4][1])
print(fit$analyses[1][2])
print(fit$analyses[1])#[4][1])
print(fit$analyses[1][3])
head(fit)
head(fit$analyses[1])
head(fit$analyses[1])
print(fit$analyses$V)
head(fit$analyses[1])
getAnalysisDetails(fit$analyses[1])
## NEW ABOVE
#md.pattern(humanSampleResults_P)
# Creates data frame with both groups scores
genResults = genSampleResults_P$Score
humResults = humanSampleResults_P$Score
samples <- data.frame(humResults, genResults)
samples.imp <- mice(samples, m = imputations, method = "pmm")
print(complete(samples.imp, 1))
# Extract the "tall" matrix which stacks the imputations
samples.comp <- complete(samples.imp, "long", include = TRUE)
# Visualize Shit
samples.comp$humResults.NA <- cci(samples$humResults)
head(samples.comp[, c("Score", "Score.NA")])
#Plots Graph of Imputated Values
ggplot(samples.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
samples.imp <- mice(samples, m = imputations, method = "pmm")
samples.imp <- mice(samples, m = imputations, method = "pmm")
samples.imp <- mice(samples, m = imputations, method = "pmm")
# Extract the "tall" matrix which stacks the imputations
samples.comp <- complete(samples.imp, "long", include = TRUE)
# Visualize Shit
samples.comp$humResults.NA <- cci(samples$humResults)
head(samples.comp[, c("humResults", "humResults.NA")])
#Plots Graph of Imputated Values
ggplot(samples.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
# Extract the "tall" matrix which stacks the imputations
samples.comp <- complete(samples.imp, "long", include = TRUE)
# Visualize Shit
samples.comp$humResults.NA <- cci(samples$humResults)
head(samples.comp[, c("humResults", "humResults.NA")])
#Plots Graph of Imputated Values
ggplot(samples.comp,
aes(x= .imp, y = humResults, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
library(ggplot2)
# Paths to data Set
humanDataDir <- "HumanResults/"
genDataDir <- "SampleResults/"
# Number of Imputations
imputations <- 5
# Opens CSV's
problem = 0
genSampleResults_P <- read.csv(gsub(" ", "", paste(genDataDir,'P',problem,".csv")))
humanSampleResults_P <- read.csv(gsub(" ", "", paste(humanDataDir,'p',problem,".csv")))
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
# Extract the "tall" matrix which stacks the imputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = TRUE)
genSamplesResults_P.comp <- complete(genSamplesResults_P.imp, "long", include = TRUE)
# cci` returns logical whether its input is complete at each observation.
humanSampleResults_P.comp$Score.NA <- cci(humanSampleResults_P$Score)
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
# Extract the "tall" matrix which stacks the imputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = TRUE)
genSamplesResults_P.comp <- complete(genSamplesResults_P.imp, "long", include = TRUE)
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
# Extract the "tall" matrix which stacks the imputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = TRUE)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = TRUE)
# cci` returns logical whether its input is complete at each observation.
humanSampleResults_P.comp$Score.NA <- cci(humanSampleResults_P$Score)
genSampleResults_P.comp$humResults.NA <- cci(genSampleResults_P$Score)
#Plots Graph of Imputated Values
# Visualize Shit
head(humanSampleResults_P.comp[, c("Score", "Score.NA")])
ggplot(humanSampleResults_P.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
display_imputations(humanSampleResults_P)
library(mice)
library(ggplot2)
# Paths to data Set
humanDataDir <- "HumanResults/"
genDataDir <- "SampleResults/"
# Number of Imputations
imputations <- 5
display_imputations <- function(impData) {
# Extract the "tall" matrix which stacks the imputations
impData.comp <- complete(impData.imp, "long", include = TRUE)
# cci` returns logical whether its input is complete at each observation.
impData.comp$Score.NA <- cci(impData$Score)
#Plots Graph of Imputated Values
# Visualize Shit
head(impData.comp[, c("Score", "Score.NA")])
ggplot(impData.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
}
# Opens CSV's
problem = 0
genSampleResults_P <- read.csv(gsub(" ", "", paste(genDataDir,'P',problem,".csv")))
humanSampleResults_P <- read.csv(gsub(" ", "", paste(humanDataDir,'p',problem,".csv")))
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
display_imputations(humanSampleResults_P)
# Creates data frame with both groups scores
genResults = genSampleResults_P$Score
humResults = humanSampleResults_P$Score
samples <- data.frame(humResults, genResults)
print(samples)
# Paths to data Set
humanDataDir <- "HumanResults/"
genDataDir <- "SampleResults/"
# Number of Imputations
imputations <- 5
display_imputations <- function(impData) {
print(impData)
# Extract the "tall" matrix which stacks the imputations
impData.comp <- complete(impData.imp, "long", include = TRUE)
# cci` returns logical whether its input is complete at each observation.
impData.comp$Score.NA <- cci(impData$Score)
#Plots Graph of Imputated Values
# Visualize Shit
head(impData.comp[, c("Score", "Score.NA")])
ggplot(impData.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
}
# Opens CSV's
problem = 0
genSampleResults_P <- read.csv(gsub(" ", "", paste(genDataDir,'P',problem,".csv")))
humanSampleResults_P <- read.csv(gsub(" ", "", paste(humanDataDir,'p',problem,".csv")))
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
display_imputations(humanSampleResults_P)
display_imputations(humanSampleResults_P.imp)
display_imputations(mice(humanSampleResults_P, m = imputations, method = "pmm"))
display_imputations(humanSampleResults_P.imp)
# Paths to data Set
humanDataDir <- "HumanResults/"
genDataDir <- "SampleResults/"
# Number of Imputations
imputations <- 5
display_imputations <- function(impData) {
# Extract the "tall" matrix which stacks the imputations
impData.comp <- complete(impData, "long", include = TRUE)
# cci` returns logical whether its input is complete at each observation.
impData.comp$Score.NA <- cci(impData$Score)
#Plots Graph of Imputated Values
# Visualize Shit
head(impData.comp[, c("Score", "Score.NA")])
ggplot(impData.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
}
# Opens CSV's
problem = 0
genSampleResults_P <- read.csv(gsub(" ", "", paste(genDataDir,'P',problem,".csv")))
humanSampleResults_P <- read.csv(gsub(" ", "", paste(humanDataDir,'p',problem,".csv")))
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
display_imputations(humanSampleResults_P.imp)
display_imputations(humanSampleResults_P)
# Extract the "tall" matrix which stacks the imputations
impData.comp <- complete(impData.imp, "long", include = TRUE)
display_imputations <- function(impData) {
}
# Opens CSV's
problem = 0
genSampleResults_P <- read.csv(gsub(" ", "", paste(genDataDir,'P',problem,".csv")))
humanSampleResults_P <- read.csv(gsub(" ", "", paste(humanDataDir,'p',problem,".csv")))
# Create Imputated data
humanSampleResults_P.imp <- mice(humanSampleResults_P, m = imputations, method = "pmm")
genSampleResults_P.imp <- mice(genSampleResults_P, m = imputations, method = "pmm")
# Extract the "tall" matrix which stacks the imputations
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = TRUE)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = TRUE)
# cci` returns logical whether its input is complete at each observation.
humanSampleResults_P.comp$Score.NA <- cci(humanSampleResults_P$Score)
genSampleResults_P.comp$humResults.NA <- cci(genSampleResults_P$Score)
#Plots Graph of Imputated Values
# Visualize Shit
head(humanSampleResults_P.comp[, c("Score", "Score.NA")])
ggplot(humanSampleResults_P.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
# # cci` returns logical whether its input is complete at each observation.
# humanSampleResults_P.comp$Score.NA <- cci(humanSampleResults_P$Score)
# genSampleResults_P.comp$humResults.NA <- cci(genSampleResults_P$Score)
# #Plots Graph of Imputated Values
# # Visualize Shit
# head(humanSampleResults_P.comp[, c("Score", "Score.NA")])
# ggplot(humanSampleResults_P.comp,
#        aes(x= .imp, y = Score, color = Score.NA)) +
#   geom_jitter(show.legend = FALSE,
#               width = .1)
visualize_imputations <- function(impData, varName) {
# Extract the "tall" matrix which stacks the imputations
impData.comp <- complete(impData, "long", include = TRUE)
# Compute whether each observation is complete
impData.comp$NA_Flag <- cci(impData[[varName]])
# Plot the imputed values
ggplot(impData.comp,
aes(x = .imp, y = .imp, color = NA_Flag)) +
geom_jitter(show.legend = FALSE,
width = 0.1) +
labs(x = "Imputation Number",
y = varName,
title = paste("Imputed Values for", varName))
}
# Example usage:
visualize_imputations(humanSampleResults_P.imp, "Score")
# cci` returns logical whether its input is complete at each observation.
humanSampleResults_P.comp$Score.NA <- cci(humanSampleResults_P$Score)
genSampleResults_P.comp$humResults.NA <- cci(genSampleResults_P$Score)
#Plots Graph of Imputated Values
# Visualize Shit
head(humanSampleResults_P.comp[, c("Score", "Score.NA")])
ggplot(humanSampleResults_P.comp,
aes(x= .imp, y = Score, color = Score.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
# Creates data frame with both groups scores
genResults = genSampleResults_P$Score
humResults = humanSampleResults_P$Score
samples <- data.frame(humResults, genResults)
print(samples)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = FALSE)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = FALSE)
# Creates data frame with both groups scores
genResults = genSampleResults_P$Score
humResults = humanSampleResults_P$Score
samples <- data.frame(humResults, genResults)
print(samples)
# Creates data frame with both groups scores
genResults = complete(genSampleResults_P.imp, "long", include = FALSE)
humResults = complete(genSampleResults_P.imp, "long", include = FALSE)
samples <- data.frame(humResults, genResults)
print(samples)
# Creates data frame with both groups scores
genResults = complete(genSampleResults_P.imp$Score, "long", include = FALSE)
# Creates data frame with both groups scores
genResults = complete(genSampleResults_P.imp, "long", include = FALSE)$Score
humResults = complete(genSampleResults_P.imp, "long", include = FALSE)
samples <- data.frame(humResults, genResults)
print(samples)
# Creates data frame with both groups scores
genResults = complete(genSampleResults_P.imp, "long", include = FALSE)$Score
humResults = complete(genSampleResults_P.imp, "long", include = FALSE)$Score
samples <- data.frame(humResults, genResults)
print(samples)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = FALSE)
print(genSampleResults_P)
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = FALSE)
print(humanSampleResults_P)
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = FALSE)
print(humanSampleResults_P.comp)
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = FALSE)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = FALSE)
humanSampleResults_P.comp <- complete(humanSampleResults_P.imp, "long", include = FALSE)
genSampleResults_P.comp <- complete(genSampleResults_P.imp, "long", include = FALSE)
# Creates data frame with both groups scores
imp = humanSampleResults_P.comp$.imp
humResults = humanSampleResults_P.comp$Score
samples <- data.frame(imp, humResults, genResults)
print(samples)
zResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$.imp == curImp,]
gen <- samples$genResults[samples$.imp == curImp,]
print(gen)
results = wilcox.test(hum$Score, gen$Score,
alternative = "greater", paired = TRUE, exact = FALSE)
zResults <- insert_sorted_value(results$statistic, zResults)
}
zResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$.imp == curImp,]
gen <- samples$genResults[samples$.imp == curImp,]
print(gen)
results = wilcox.test(hum$Score, gen$Score,
alternative = "greater", paired = TRUE, exact = FALSE)
# zResults <- insert_sorted_value(results$statistic, zResults)
}
zResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp,]
gen <- samples$genResults[samples$imp == curImp,]
print(gen)
results = wilcox.test(hum$Score, gen$Score,
alternative = "greater", paired = TRUE, exact = FALSE)
# zResults <- insert_sorted_value(results$statistic, zResults)
}
print(zResults)
zResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp,]
gen <- samples$genResults[samples$imp == curImp,]
print(gen)
results = wilcox.test(hum$Score, gen$Score,
alternative = "greater", paired = TRUE, exact = FALSE)
zResults <- insert_sorted_value(results$statistic, zResults)
}
print(zResults)
d <- c(zResults)
pool(d)
zResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp]
gen <- samples$genResults[samples$imp == curImp]
print(gen)
results = wilcox.test(hum$Score, gen$Score,
alternative = "greater", paired = TRUE, exact = FALSE)
zResults <- insert_sorted_value(results$statistic, zResults)
}
zResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp]
gen <- samples$genResults[samples$imp == curImp]
#print(gen)
results = wilcox.test(hum, gen,
alternative = "greater", paired = TRUE, exact = FALSE)
zResults <- insert_sorted_value(results$statistic, zResults)
}
print(zResults)
zResults <- insert_sorted_value(results$statistic, zResults)
pValueResutls <- insert_sorted_value(results$parameter, pValueResults)
pValueResults <- numeric(0)
zResults <- numeric(0)
for (curImp in 1:imputations) {
hum <- samples$humResults[samples$imp == curImp]
gen <- samples$genResults[samples$imp == curImp]
#print(gen)
results = wilcox.test(hum, gen,
alternative = "greater", paired = TRUE, exact = FALSE)
zResults <- insert_sorted_value(results$statistic, zResults)
pValueResults <- insert_sorted_value(results$parameter, pValueResults)
}
print(zResults)
print(zResults)
print(pValueResults)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
source("~/Games AC/CompSci Year 3/Dissertation/Data/MI.R", echo=TRUE)
