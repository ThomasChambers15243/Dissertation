{"p1":"Given a string of unknown length, calculate the sum total ASCII value of all characters, ignoring spaces. Return an integer. e.g. “Python” = 642 def Q1(s : str) -> int:", "p2": "You are given a list of tuples containing two integers represented as strings, of n length. Each tuple represents a floating point number, the first string is the integer and the second is the decimal. Find the total of all floating point numbers in the list. Return a float e.g. [ ('1','0'), ('32','15') ] = 1.0 + 32.15 = 33.15 def Q2(floatList) -> float:", "p3": " Given a string *s* containing just the characters '(', ')', '{', '}', ' [' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type. Return a Boolean Value. e.g. “[(())]” is valid “[[()]” is not valid def Q3(s : str) -> bool:", "p4": "Given the first node of an unsorted linked list and implementation of the nodes, sort the list so it is ordered, from smallest value to largest. Include this code above your answer: class Node: def __init__(self, data : int): self.next = None self.data = data  def Q4(node : Node) -> Node:", "p5": "Given the root parent node of an unsorted tree and the implementation of the nodes, find all duplicate nodes (if any) and remove them from the tree so all nodes hold unique data. The tree does not need to be sorted or balanced. Include this code in your answer: class Node(): def __init__(self, data=-1): self.data = data self.children = []    def AddChild(self, node): self.children.append(node) def AddChildren(self, numChildren : int, childrenData : list[int]): for child in range(numChildren): self.AddChild(Node(childrenData[child])) def Q5(root : Node) -> Node:"}